# Developer Documentation 

## Project Structure: 

### Core Components
1. **Main Program `display.c`** 
- Reads point cloud data from stdin 
- Calls the functions for grayscale visualization 
- Handles the control flow and error management 

2. **Point Cloud Processing (`pointcloud.c`, `pointcloud.h`):**
- Data structure definitions 
- I/O operations 
- Logic for visualization 

3. **Utility Function (`util.c`, `util.h`):** 
- Array management 
- Memory allocations and deallocations 
- Associated data structure implementations 

4. **Processing for Bitmap (`bmp.c`, `bmp.h`):**
- GIF file creation 
- Processing for colors 
- Output the image 
- Downloaded from the git repo mentioned in project specifications 

## Data Structures

### Point Cloud Data (pcd_t)
```c
typedef struct pcd_t {
    double x;        // x coordinate
    double y;        // y coordinate
    double z;        // height value
    double water;    // water amount (for future use)
    struct pcd_t *north;  // north neighbor pointer
    struct pcd_t *south;  // south neighbor pointer
    struct pcd_t *east;   // east neighbor pointer
    struct pcd_t *west;   // west neighbor pointer
} pcd_t;
```
### Dynamic List Structure : 

```c
typedef struct {
    int max_size;         // maximum capacity
    int max_element_size; // size of each element
    void* data;          // raw data array
    int size;            // current number of elements
} List;
```

## Functions: 

### List Management: 
```c
int listInit(List* l, int max_elmt_size)
```
**Purpose:** Initializes the dynamic list 

**Parameters:** 
- `l`: pointer to list structure 
- `max_elmt_size`: element size (in bytes)

**Returns:** 
- 1 on success 
- 0 on failure 

**Implementation Details:** 
- Initial Capacity: 10 elements 
- Allocates initial memory 
- Initializes the list parameters 

```c
void listAddEnd(List* l, void* elmt)
```
**Purpose:** Function to append elements to the list 

**Parameters:** 
- `l`: list strture pointer 
- `elmt`: element that you want to add to the end of the list 

**Implementation Details:** 
- Doubles capacity when filled 
- Copies the data element to the new allocated memory 
- Updates the size counter 
- Frees the previously allocated memory 

```c
void *listGet(List* l, int index)
```
**Purpose:** Accesses list elements 

**Parameters:** 
- `l`: pointer for the list structure 
- `index`: index for the element 

**Returns:** 
- Element pointer 
- or NULL (if invalid input)

### Array Management: 
```c
void *allocateArray(int rows, int columns)
```
**Purpose:** Creates a 2D array 

**Parameters:** 
- `rows`: total number of rows 
- `columns:` number of columns 

**Returns:** Array pointer or NULL (on allocation failure)

### Point cloud processing: 
```c
List* readPointCloudData(FILE *stream)
```
**Purpose:** Point cloud data 

**Parameters:** 
- `stream` : input file stream 

**Returns:** Populated list or NULL 

**Input Format:** 
```
number_of_points
x1 y1 z1
x2 y2 z2
...
```

**Error handling:** 
- Fails if there's an invalid format 
- Fails if it's unable to allocate memory 
- File I/O errors 

```
void imagePointCloud(List *l, char *filename)
```

**Purpose:** Generates visualization 

**Parameters:**
- `l`: point cloud data 
- `filename`: name of the output file you want 

**Output:** 
- 800*800 gif 

**Process:** 
- Scale coordinates 
- Maps heights to grayscale 
- Generate image 
- Save to file 

```
void imagePointCloud(List *l, char *filename)
```
**Purpose:** Generates visualization 

**Parameters**: 
- `l`: point cloud data 
- `filename:` output file 

**Output:** 
- 800*800 GIF 

**Process:** 
- Scale coordinates 
- Maps heights to grayscale 
- Generates image 
- Save to file 

## Build System:
```
CFLAGS = -Wall -Werror
```
### Makefile targets: 
- `make all`: build the display executable 
- `make clean`: remove build artifacts 
- Individual object targets for each source files 

### Compiler configuration: 
```c
CC = gcc
CFLAGS = -Wall -Werror
```
- Enables all the warnings 
- Treats warning as errors 

### Dependencies: 
- GCC compiler
- Standard C libraries 
- Doesn't require dependencies 

## Error handling: 
- Invalid input detection 
- Memory allocation checks 
- File I/O verification 







